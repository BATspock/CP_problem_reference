872. Leaf-Similar Trees
C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode*> tree1, tree2;
        vector<int> leaf1, leaf2;

        if (root1) tree1.push(root1);
        while(!tree1.empty()){
            TreeNode* cur = tree1.top();
            tree1.pop();
            if  (!cur->left && ! cur->right) leaf1.push_back(cur->val);
            if (cur->left) tree1.push(cur->left);
            if (cur->right) tree1.push(cur->right); 
            
        }
        if (root2) tree2.push(root2);
        while(!tree2.empty()){
            TreeNode* cur = tree2.top();
            tree2.pop();
            if  (!cur->left && ! cur->right) leaf2.push_back(cur->val);
            if (cur->left) tree2.push(cur->left);
            if (cur->right) tree2.push(cur->right); 
            
        }

        if (leaf1.size() != leaf2.size()) return false;
        
        for (int i =0;i<leaf1.size();i++){
            if (leaf1[i] != leaf2[i]) return false;
        }

        return true;
    }
};

java:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        Stack<TreeNode> tree1= new Stack<>();
        Stack<TreeNode> tree2= new Stack<>();
        ArrayList<Integer> leaf1= new ArrayList<>();
        ArrayList<Integer> leaf2= new ArrayList<>();

        if (root1!=null) {tree1.push(root1);}
        if (root2!=null) {tree2.push(root2);}

        while(!tree1.isEmpty()){
            TreeNode cur = tree1.peek();
            tree1.pop();
            if (cur.right==null && cur.left==null) leaf1.add(cur.val);
            if (cur.left!=null) tree1.push(cur.left);
            if (cur.right!=null) tree1.push(cur.right);

        }

        while(!tree2.isEmpty()){
            TreeNode cur = tree2.peek();
            tree2.pop();
            if (cur.right==null && cur.left==null) leaf2.add(cur.val);
            if (cur.left!=null) tree2.push(cur.left);
            if (cur.right!=null) tree2.push(cur.right);

        }

        if (leaf1.size() != leaf2.size()) {return false;}

        for (int i =0;i<leaf1.size();i++){
            if (leaf1.get(i)!=leaf2.get(i)){
                return false;
            }
        }

        return true;


    }
}
