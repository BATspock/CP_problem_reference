872. Leaf-Similar Trees
C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode*> tree1, tree2;
        vector<int> leaf1, leaf2;

        if (root1) tree1.push(root1);
        while(!tree1.empty()){
            TreeNode* cur = tree1.top();
            tree1.pop();
            if  (!cur->left && ! cur->right) leaf1.push_back(cur->val);
            if (cur->left) tree1.push(cur->left);
            if (cur->right) tree1.push(cur->right); 
            
        }
        if (root2) tree2.push(root2);
        while(!tree2.empty()){
            TreeNode* cur = tree2.top();
            tree2.pop();
            if  (!cur->left && ! cur->right) leaf2.push_back(cur->val);
            if (cur->left) tree2.push(cur->left);
            if (cur->right) tree2.push(cur->right); 
            
        }

        if (leaf1.size() != leaf2.size()) return false;
        
        for (int i =0;i<leaf1.size();i++){
            if (leaf1[i] != leaf2[i]) return false;
        }

        return true;
    }
};
